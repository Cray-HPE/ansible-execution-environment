@Library('cms-meta-tools@feature/rpm_version_and_release') _
@Library('csm-shared-library') __

pipeline {
    agent {
        label "metal-gcp-builder"
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: "10"))
        timestamps()
    }

    environment {
        NAME = "cray-aee"
        DESCRIPTION = "Ansible Execution Environment"
        IS_STABLE = getBuildIsStable()
    }

    stages {
        stage("Clone cms_meta_tools repo") {
            steps {
                // This function is defined in cms-meta-tools:vars/cloneCMSMetaTools.groovy
                cloneCMSMetaTools()
            }
        }

        stage("Set Versions") {
            steps {
                // This function is defined in cms-meta-tools:vars/setVersionFiles.groovy
                writeFile(file: ".version", text: "1.11.0-alpha.245")
                setVersionFiles()
                sh(returnStdout: false, script: "head -1 .docker_version")
                sh(returnStdout: false, script: "head -1 .rpm_version")
                sh(returnStdout: false, script: "head -1 .rpm_release")
                sh(returnStdout: false, script: "head -1 .chart_version")
                sh(returnStdout: false, script: "head -1 .version")
            }
        }

        stage("runBuildPrep") {
            steps {
                sh "make runbuildprep"
            }
        }

        stage("Lint") {
            steps {
                sh "make lint"
            }
        }

        stage("Build Image") {
            environment {
                DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
                DOCKER_ARGS = getDockerBuildArgs(name: env.NAME, description: env.DESCRIPTION, version: env.DOCKER_VERSION)
            }

            steps {
                echo "Docker args are ${env.DOCKER_ARGS}"
                sh "make image"
            }
        }

        stage('Publish') {
            environment {
                DOCKER_VERSION = sh(returnStdout: true, script: "head -1 .docker_version").trim()
            }

            steps {
                publishCsmDockerImage(image: env.NAME, tag: env.DOCKER_VERSION, isStable: env.IS_STABLE)
            }
        }
    }
}
